// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: geoservice/contract.proto

package geoservicev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Geoprovider_AddressSearch_FullMethodName = "/geoservice.Geoprovider/AddressSearch"
	Geoprovider_Geocode_FullMethodName       = "/geoservice.Geoprovider/Geocode"
)

// GeoproviderClient is the client API for Geoprovider service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GeoproviderClient interface {
	AddressSearch(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Response, error)
	Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*Response, error)
}

type geoproviderClient struct {
	cc grpc.ClientConnInterface
}

func NewGeoproviderClient(cc grpc.ClientConnInterface) GeoproviderClient {
	return &geoproviderClient{cc}
}

func (c *geoproviderClient) AddressSearch(ctx context.Context, in *AddressRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Geoprovider_AddressSearch_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *geoproviderClient) Geocode(ctx context.Context, in *GeocodeRequest, opts ...grpc.CallOption) (*Response, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Response)
	err := c.cc.Invoke(ctx, Geoprovider_Geocode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GeoproviderServer is the server API for Geoprovider service.
// All implementations must embed UnimplementedGeoproviderServer
// for forward compatibility.
type GeoproviderServer interface {
	AddressSearch(context.Context, *AddressRequest) (*Response, error)
	Geocode(context.Context, *GeocodeRequest) (*Response, error)
	mustEmbedUnimplementedGeoproviderServer()
}

// UnimplementedGeoproviderServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGeoproviderServer struct{}

func (UnimplementedGeoproviderServer) AddressSearch(context.Context, *AddressRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddressSearch not implemented")
}
func (UnimplementedGeoproviderServer) Geocode(context.Context, *GeocodeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Geocode not implemented")
}
func (UnimplementedGeoproviderServer) mustEmbedUnimplementedGeoproviderServer() {}
func (UnimplementedGeoproviderServer) testEmbeddedByValue()                     {}

// UnsafeGeoproviderServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GeoproviderServer will
// result in compilation errors.
type UnsafeGeoproviderServer interface {
	mustEmbedUnimplementedGeoproviderServer()
}

func RegisterGeoproviderServer(s grpc.ServiceRegistrar, srv GeoproviderServer) {
	// If the following call pancis, it indicates UnimplementedGeoproviderServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Geoprovider_ServiceDesc, srv)
}

func _Geoprovider_AddressSearch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoproviderServer).AddressSearch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geoprovider_AddressSearch_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoproviderServer).AddressSearch(ctx, req.(*AddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Geoprovider_Geocode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GeocodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GeoproviderServer).Geocode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Geoprovider_Geocode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GeoproviderServer).Geocode(ctx, req.(*GeocodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Geoprovider_ServiceDesc is the grpc.ServiceDesc for Geoprovider service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Geoprovider_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "geoservice.Geoprovider",
	HandlerType: (*GeoproviderServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddressSearch",
			Handler:    _Geoprovider_AddressSearch_Handler,
		},
		{
			MethodName: "Geocode",
			Handler:    _Geoprovider_Geocode_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "geoservice/contract.proto",
}
